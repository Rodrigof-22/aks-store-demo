name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      makeline-service: ${{ steps.filter.outputs.makeline-service }}
      order-service: ${{ steps.filter.outputs.order-service }}
      product-service: ${{ steps.filter.outputs.product-service }}
      store-front: ${{ steps.filter.outputs.store-front }}
      store-admin: ${{ steps.filter.outputs.store-admin }}
      virtual-customer: ${{ steps.filter.outputs.virtual-customer }}
      virtual-worker: ${{ steps.filter.outputs.virtual-worker }}
      ai-service: ${{ steps.filter.outputs.ai-service }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            makeline-service:
              - 'src/makeline-service/**'
            order-service:
              - 'src/order-service/**'
            product-service:
              - 'src/product-service/**'
            store-front:
              - 'src/store-front/**'
            store-admin:
              - 'src/store-admin/**'
            virtual-customer:
              - 'src/virtual-customer/**'
            virtual-worker:
              - 'src/virtual-worker/**'
            ai-service:
              - 'src/ai-service/**'
  
  build-and-push-ai-service:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.ai-service == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for ai-service
        uses: docker/build-push-action@v2
        with:
          context: ./src/ai-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-service:latest

      - name: Log out from DockerHub
        run: docker logout

  build-and-push-makeline-service:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.makeline-service == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for makeline-service
        uses: docker/build-push-action@v2
        with:
          context: ./src/makeline-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/makeline-service:latest

      - name: Log out from DockerHub
        run: docker logout

  build-and-push-order-service:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.order-service == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for order-service
        uses: docker/build-push-action@v2
        with:
          context: ./src/order-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest

      - name: Log out from DockerHub
        run: docker logout

  build-and-push-product-service:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.product-service == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for product-service
        uses: docker/build-push-action@v2
        with:
          context: ./src/product-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest

      - name: Log out from DockerHub
        run: docker logout

  build-and-push-store-admin:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.store-admin == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for store-admin
        uses: docker/build-push-action@v2
        with:
          context: ./src/store-admin
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/store-admin:latest

      - name: Log out from DockerHub
        run: docker logout

  build-and-push-store-front:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.store-front == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for store-front
        uses: docker/build-push-action@v2
        with:
          context: ./src/store-front
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/store-front:latest

      - name: Log out from DockerHub
        run: docker logout

  build-and-push-virtual-customer:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.virtual-customer == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for virtual-customer
        uses: docker/build-push-action@v2
        with:
          context: ./src/virtual-customer
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/virtual-customer:latest

      - name: Log out from DockerHub
        run: docker logout

  build-and-push-virtual-worker:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.virtual-worker == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for virtual-worker
        uses: docker/build-push-action@v2
        with:
          context: ./src/virtual-worker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/virtual-worker:latest

      - name: Log out from DockerHub
        run: docker logout